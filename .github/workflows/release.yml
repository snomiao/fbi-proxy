name: Build and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build proxy binary
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: proxy-linux-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: proxy-linux-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: proxy-windows-x64.exe
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            binary_name: proxy-windows-arm64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: proxy-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: proxy-macos-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build binary
        working-directory: rs
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary
        shell: bash
        run: |
          mkdir -p release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp rs/target/${{ matrix.target }}/release/proxy.exe release/${{ matrix.binary_name }}
          else
            cp rs/target/${{ matrix.target }}/release/proxy release/${{ matrix.binary_name }}
            chmod +x release/${{ matrix.binary_name }}
          fi

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary_name }}
          path: release/${{ matrix.binary_name }}

  release:
    name: Semantic Release
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release

      - name: Flatten artifacts
        run: |
          mkdir -p release-flat
          find release -type f -exec cp {} release-flat/ \;
          ls -la release-flat/

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release
